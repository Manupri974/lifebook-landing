import fetch from "node-fetch";
import { config } from "dotenv";

config();
const apiKey = process.env.OPENAI_API_KEY;

export default async function genererLivre(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "M√©thode non autoris√©e" });
  }

  const { segments } = req.body;

  if (!apiKey || !segments || typeof segments !== "object") {
    return res.status(400).json({ message: "Cl√© API ou segments manquant/invalide" });
  }

  console.log("üöÄ G√©n√©ration du livre √† partir des segments logiques...");
  console.log("üì¶ Segments re√ßus :", segments);

  const promptSysteme = "Tu es un biographe litt√©raire, empathique, humain.";
  const promptChapitre = (bloc, num) => `Voici une s√©quence d‚Äôinterview biographique :

${bloc}

Ta mission :
- G√©n√©re un **chapitre fluide et narratif** √† partir de ces √©l√©ments.
- Commence par un **titre stylis√©** pour le chapitre ${num}, par exemple : "Chapitre ${num} ‚Äî Le go√ªt de l‚Äôenfance".
- Puis r√©dige un texte fluide, litt√©raire, chaleureux et r√©aliste √† la premi√®re ou troisi√®me personne.
- N‚Äôinvente rien. Utilise uniquement les faits √©voqu√©s.
- √âvite les r√©p√©titions. Le style doit rester simple et fluide.`;

  const chapitres = [];

  for (const numero in segments) {
    const bloc = segments[numero].join("\n\n");
    console.log(`üì§ Envoi de la s√©quence ${numero} √† l‚ÄôAPI...`);
    console.log("üìÑ Contenu :", bloc);

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o",
          temperature: 1.1,
          messages: [
            { role: "system", content: promptSysteme },
            { role: "user", content: promptChapitre(bloc, numero) }
          ]
        })
      });

      const data = await response.json();
      const texte = data?.choices?.[0]?.message?.content;

      if (texte) {
        chapitres.push(texte.trim());
        console.log(`‚úÖ Chapitre ${numero} g√©n√©r√©`);
      } else {
        console.warn(`‚ö†Ô∏è Aucune r√©ponse pour la s√©quence ${numero}`, data);
      }
    } catch (err) {
      console.error(`‚ùå Erreur API pour la s√©quence ${numero} :`, err);
    }
  }

  const texteFinal = chapitres.join("\n\n");

  if (!texteFinal || texteFinal.length < 100) {
    return res.status(500).json({ message: "Le texte g√©n√©r√© est trop court ou vide." });
  }

  console.log("üìò Livre final g√©n√©r√© avec succ√®s.");
  res.status(200).json({ texte: texteFinal });
}
