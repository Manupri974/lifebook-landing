export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'M√©thode non autoris√©e' });
  }

  const apiKey = process.env.OPENAI_API_KEY;
  const { historique } = req.body;

  if (!apiKey || !historique || !Array.isArray(historique)) {
    return res.status(400).json({ message: 'Cl√© API ou historique manquant/invalide' });
  }

  console.log("üöÄ Envoi de l‚Äôhistorique complet √† OpenAI...");

  const promptSysteme = `Tu es un biographe professionnel. 
Tu √©cris un **chapitre de livre biographique** √† partir d'une **interview compl√®te**.
Tu dois :
- √âcrire **√† la troisi√®me personne**, comme un narrateur ext√©rieur (jamais "vous").
- Suivre un **style litt√©raire fluide et vivant**
- Inclure **des d√©tails concrets, anecdotes, √©motions**.
- Tu peux reformuler les r√©ponses, **les approfondir**, **cr√©√©er une histoire plus ettof√©e auour des √©l√©ments re√ßus**
- **Raconter une histoire vraie**, humaine, sinc√®re.`;

  const reponsesUtiles = historique
    .filter(m => m.role === 'user')
    .map(m => m.content.trim())
    .filter(Boolean)
    .join("\n\n");

  const promptUser = `Voici les r√©ponses brutes d‚Äôune interview biographique.
R√©dige un **chapitre fluide, chaleureux et vivant** √† partir de ces √©l√©ments :

${reponsesUtiles}
`;

  console.log("üì§ Prompt utilisateur envoy√© √† l'API :\n", promptUser.slice(0, 3000)); // tronqu√© pour √©viter de saturer les logs

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 1.1,
        max_tokens: 2000,
        messages: [
          { role: "system", content: promptSysteme },
          { role: "user", content: promptUser }
        ]
      })
    });

    const data = await response.json();
    const texteFinal = data?.choices?.[0]?.message?.content?.trim();

    if (!texteFinal || texteFinal.length < 200) {
      return res.status(500).json({ message: "Le texte g√©n√©r√© est vide ou trop court." });
    }

    console.log("‚úÖ Texte g√©n√©r√© avec succ√®s.");
    res.status(200).json({ texte: texteFinal });

  } catch (err) {
    console.error("‚ùå Erreur pendant la g√©n√©ration :", err);
    res.status(500).json({ message: "Erreur serveur pendant la g√©n√©ration." });
  }
}
